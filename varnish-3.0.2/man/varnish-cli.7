.\" Man page generated from reStructeredText.
.
.TH VARNISH 7 "2011-03-23" "0.1" ""
.SH NAME
varnish \- Varnish Command Line Interface
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH DESCRIPTION
.sp
Varnish as a command line interface (CLI) which can control and change
most of the operational parameters and the configuration of Varnish,
without interrupting the running service.
.sp
The CLI can be used for the following tasks:
.INDENT 0.0
.TP
.B configuration
You can upload, change and delete VCL files from the CLI.
.TP
.B parameters
You can inspect and change the various parameters Varnish has
available through the CLI. The individual parameters are
documented in the varnishd(1) man page.
.TP
.B statistics
Statistic counters are available from the CLI.
.TP
.B bans
Bans are filters that are applied to keep Varnish from serving
stale content. When you issue a ban Varnish will not serve any
\fIbanned\fP object from cache, but rather re\-fetch it from its
backend servers.
.TP
.B process management
You can stop and start the cache (child) process though the
CLI. You can also retrieve the lastst stack trace if the child
process has crashed.
.UNINDENT
.sp
If you invoke varnishd(1) with \-T, \-M or \-d the CLI will be
available. In debug mode (\-d) the CLI will be in the foreground, with
\-T you can connect to it with varnishadm or telnet and with \-M
varnishd will connect back to a listening service \fIpushing\fP the CLI to
that service. Please see varnishd(1) for details.
.SS Syntax
.sp
Commands are usually terminated with a newline. Long command can be
entered using sh style \fIhere documents\fP. The format of here\-documents
is::
.sp
.nf
.ft C
<< word
     here document
word
.ft P
.fi
.sp
\fIword\fP can be any continuous string choosen to make sure it doesn\(aqt
appear naturally in the following \fIhere document\fP.
.sp
When using the here document style of input there are no restrictions
on lenght. When using newline\-terminated commands maximum lenght is
limited by the varnishd parameter \fIcli_buffer\fP.
.sp
When commands are newline terminated they get \fItokenized\fP before
parsing so if you have significant spaces enclose your strings in
double quotes. Within the quotes you can escape characters with
\e. The n, r and t get translated to newlines, carrage returns and
tabs. Double quotes themselves can be escaped with a backslash.
.sp
To enter characters in octals use the \ennn syntax. Hexadecimals can
be entered with the \exnn syntax.
.SS Commands
.INDENT 0.0
.TP
.B help [command]
Display a list of available commands.
.sp
If the command is specified, display help for this command.
.TP
.B param.set param value
Set the parameter specified by param to the specified value.
See Run\-Time Parameters for a list of parame‐ ters.
.TP
.B param.show [\-l] [param]
Display a list if run\-time parameters and their values.
.sp
If the \-l option is specified, the list includes a brief
explanation of each parameter.
.sp
If a param is specified, display only the value and explanation
for this parameter.
.TP
.B ping  [timestamp]
Ping the Varnish cache process, keeping the connection alive.
.TP
.B ban   \fIfield operator argument\fP [&& field operator argument [...]]
Immediately invalidate all documents matching the ban
expression.  See \fIBan Expressions\fP for more documentation and
examples.
.TP
.B ban.list
All requests for objects from the cache are matched against
items on the ban list.  If an object in the cache is older than
a matching ban list item, it is considered "banned", and will be
fetched from the backend instead.
.sp
When a ban expression is older than all the objects in the
cache, it is removed from the list.
.sp
ban.list displays the ban list. The output looks something like
this (broken into two lines):
.sp
0x7fea4fcb0580 1303835108.618863   131G   req.http.host ~
www.myhost.com && req.url ~ /some/url
.sp
The first field is the address of the ban.
.sp
The second is the time of entry into the list, given
as a high precision timestamp.
.sp
The third field describes many objects point to this ban. When
an object is compared to a ban the object is marked with a
reference to the newest ban it was tested against. This isn\(aqt
really useful unless you\(aqre debugging.
.sp
A "G" marks that the ban is "Gone". Meaning it has been marked
as a duplicate or it is no longer valid. It stays in the list
for effiency reasons.
.sp
Then follows the actual ban it self.
.TP
.B ban.url regexp
Immediately invalidate all documents whose URL matches the
specified regular expression. Please note that the Host part of
the URL is ignored, so if you have several virtual hosts all of
them will be banned. Use \fIban\fP to specify a complete ban if you
need to narrow it down.
.TP
.B quit
Close the connection to the varnish admin port.
.TP
.B start
Start the Varnish cache process if it is not already running.
.TP
.B stats
Show summary statistics.
.sp
All the numbers presented are totals since server startup; for a
better idea of the current situation, use the varnishstat(1)
utility.
.TP
.B status
Check the status of the Varnish cache process.
.TP
.B stop
Stop the Varnish cache process.
.TP
.B vcl.discard configname
Discard the configuration specified by configname.  This will
have no effect if the specified configuration has a non\-zero
reference count.
.TP
.B vcl.inline configname vcl
Create a new configuration named configname with the VCL code
specified by vcl, which must be a quoted string.
.TP
.B vcl.list
List available configurations and their respective reference
counts.  The active configuration is indicated with an asterisk
("*").
.TP
.B vcl.load configname filename
Create a new configuration named configname with the contents of
the specified file.
.TP
.B vcl.show configname
Display the source code for the specified configuration.
.TP
.B vcl.use configname
Start using the configuration specified by configname for all
new requests.  Existing requests will con‐ tinue using whichever
configuration was in use when they arrived.
.UNINDENT
.SS Ban Expressions
.sp
A ban expression consists of one or more conditions.  A condition
consists of a field, an operator, and an argument.  Conditions can be
ANDed together with "&&".
.sp
A field can be any of the variables from VCL, for instance req.url,
req.http.host or obj.set\-cookie.
.sp
Operators are "==" for direct comparision, "~" for a regular
expression match, and ">" or "<" for size comparisons.  Prepending
an operator with "!" negates the expression.
.sp
The argument could be a quoted string, a regexp, or an integer.
Integers can have "KB", "MB", "GB" or "TB" appended for size related
fields.
.SS Scripting
.sp
If you are going to write a script that talks CLI to varnishd, the
include/cli.h contains the relevant magic numbers.
.sp
One particular magic number to know, is that the line with the status
code and length field always is exactly 13 characters long, including
the NL character.
.sp
For your reference the sourcefile lib/libvarnish/cli_common.h contains
the functions varnish code uses to read and write CLI response.
.SS Details on authentication
.sp
If the \-S secret\-file is given as argument to varnishd, all network
CLI connections must authenticate, by proving they know the contents
of that file.
.sp
The file is read at the time the auth command is issued and the
contents is not cached in varnishd, so it is possible to update the
file on the fly.
.sp
Use the unix file permissions to control access to the file.
.sp
An authenticated session looks like this::
.sp
.nf
.ft C
critter phk> telnet localhost 1234
Trying ::1...
Trying 127.0.0.1...
Connected to localhost.
Escape character is \(aq^]\(aq.
107 59
ixslvvxrgkjptxmcgnnsdxsvdmvfympg

Authentication required.

auth 455ce847f0073c7ab3b1465f74507b75d3dc064c1e7de3b71e00de9092fdc89a
200 193
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
Varnish HTTP accelerator CLI.
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
Type \(aqhelp\(aq for command list.
Type \(aqquit\(aq to close CLI session.
Type \(aqstart\(aq to launch worker process.
.ft P
.fi
.sp
The CLI status of 107 indicates that authentication is necessary. The
first 32 characters of the reponse text is the challenge
"ixsl...mpg". The challenge is randomly generated for each CLI
connection, and changes each time a 107 is emitted.
.sp
The most recently emitted challenge must be used for calculating the
authenticator "455c...c89a".
.sp
The authenticator is calculated by applying the SHA256 function to the
following byte sequence:
.INDENT 0.0
.IP \(bu 2
Challenge string
.IP \(bu 2
Newline (0x0a) character.
.IP \(bu 2
Contents of the secret file
.IP \(bu 2
Challenge string
.IP \(bu 2
Newline (0x0a) character.
.UNINDENT
.sp
and dumping the resulting digest in lower\-case hex.
.sp
In the above example, the secret file contained foon and thus::
.sp
.nf
.ft C
critter phk> cat > _
ixslvvxrgkjptxmcgnnsdxsvdmvfympg
foo
ixslvvxrgkjptxmcgnnsdxsvdmvfympg
^D
critter phk> hexdump \-C _
00000000  69 78 73 6c 76 76 78 72  67 6b 6a 70 74 78 6d 63  |ixslvvxrgkjptxmc|
00000010  67 6e 6e 73 64 78 73 76  64 6d 76 66 79 6d 70 67  |gnnsdxsvdmvfympg|
00000020  0a 66 6f 6f 0a 69 78 73  6c 76 76 78 72 67 6b 6a  |.foo.ixslvvxrgkj|
00000030  70 74 78 6d 63 67 6e 6e  73 64 78 73 76 64 6d 76  |ptxmcgnnsdxsvdmv|
00000040  66 79 6d 70 67 0a                                 |fympg.|
00000046
critter phk> sha256 _
SHA256 (_) = 455ce847f0073c7ab3b1465f74507b75d3dc064c1e7de3b71e00de9092fdc89a
critter phk> openssl dgst \-sha256 < _
455ce847f0073c7ab3b1465f74507b75d3dc064c1e7de3b71e00de9092fdc89a
.ft P
.fi
.sp
The sourcefile lib/libvarnish/cli_auth.c contains a useful function
which calculates the response, given an open filedescriptor to the
secret file, and the challenge string.
.SH EXAMPLES
.sp
Simple example: All requests where req.url exactly matches the string
/news are banned from the cache::
.sp
.nf
.ft C
req.url == "/news"
.ft P
.fi
.sp
Example: Ban all documents where the name does not end with ".ogg",
and where the size of the object is greater than 10 megabytes::
.sp
.nf
.ft C
req.url !~ "\e.ogg$" && obj.size > 10MB
.ft P
.fi
.sp
Example: Ban all documents where the serving host is "example.com"
or "www.example.com", and where the Set\-Cookie header received from
the backend contains "USERID=1663"::
.sp
.nf
.ft C
req.http.host ~ "^(?i)(www\e.)example.com$" && obj.set\-cookie ~ "USERID=1663"
.ft P
.fi
.SH SEE ALSO
.INDENT 0.0
.IP \(bu 2
varnishd(1)
.IP \(bu 2
vanrishadm(1)
.IP \(bu 2
vcl(7)
.UNINDENT
.SH HISTORY
.sp
The varnish manual page was written by Per Buer in 2011. Some of the
text was taken from the Varnish Cache wiki, the varnishd(7) man page
or the varnish source code.
.SH COPYRIGHT
.sp
This document is licensed under the same licence as Varnish
itself. See LICENCE for details.
.INDENT 0.0
.IP \(bu 2
Copyright (c) 2011 Varnish Software AS
.UNINDENT
.SH AUTHOR
Per Buer
.\" Generated by docutils manpage writer.
.\" 
.
