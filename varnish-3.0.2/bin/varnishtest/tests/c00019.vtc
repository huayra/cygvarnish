varnishtest "Check ban counters and duplicate ban elimination"

server s1 {
	rxreq
	txresp -hdr "foo: 0" -body "foo0"
	rxreq
	txresp -hdr "foo: 1" -body "foo1"
	rxreq
	txresp -hdr "foo: 2" -body "foo2"
	rxreq
	txresp -hdr "foo: 3" -body "foo3"
} -start

varnish v1 -vcl+backend {} -start

varnish v1 -cliok "ban.url FOO"

# There is one "magic" ban from boot
varnish v1 -expect n_ban_add == 2
varnish v1 -cliok "ban.list"

# Our fetch is not affected by the ban
# as the FOO-ban was preexisting
client c1 {
	txreq -url /BAR
	rxresp
	expect resp.http.foo == 0
	txreq -url /FOO
	rxresp
	expect resp.http.foo == 1
} -run

varnish v1 -cliok "ban.list"
varnish v1 -expect n_ban_obj_test == 0
varnish v1 -expect n_ban_re_test == 0

# Add another ban
varnish v1 -cliok "ban.url FOO"
varnish v1 -expect n_ban_add == 3
varnish v1 -cliok "ban.list"

# The cached object will be band, and a new
# fetched from the backend
client c1 {
	txreq -url /FOO
	rxresp
	expect resp.http.foo == 2
} -run

varnish v1 -expect n_ban_obj_test == 1
varnish v1 -expect n_ban_re_test == 1
varnish v1 -cliok "ban.list"

# Fetch the cached copy, just for grins
client c1 {
	txreq -url /FOO
	rxresp
	expect resp.http.foo == 2
} -run


# Now add another two bans, Kilroy should not be hit
varnish v1 -cliok "ban.url KILROY"
varnish v1 -cliok "ban.url FOO"
varnish v1 -expect n_ban_add == 5

# Enable dup removal of bans
varnish v1 -cliok "param.set ban_dups on"

# This should incapacitate the two previous FOO bans.
varnish v1 -cliok "ban.url FOO"
varnish v1 -expect n_ban_add == 6
varnish v1 -expect n_ban_dups == 3
varnish v1 -cliok "ban.list"

# And we should get a fresh object from backend
client c1 {
	txreq -url /FOO
	rxresp
	expect resp.http.foo == 3
} -run

# With only two objects having ever been compared
varnish v1 -expect n_ban_obj_test == 2
varnish v1 -expect n_ban_re_test == 2
varnish v1 -cliok "ban.list"

# Test a bogus regexp

varnish v1 -clierr 106 "ban.url [[["
